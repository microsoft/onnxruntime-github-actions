var e=require("@actions/core"),N=require("@actions/exec"),C=require("path"),D=require("os"),m=require("fs/promises"),A=new Set(["acl","armnn","azure","cann","coreml","cuda","dml","dnnl","migraphx","nnapi","openvino","qnn","rknpu","rocm","snpe","tensorrt","vitisai","vsinpu","webgpu","webnn","xnnpack"]),q=Array.from(A).sort().join(", ");async function I(s){try{return await m.stat(s),e.info(`Host path check: Found '${s}'.`),!0}catch(o){return o.code==="ENOENT"?(e.info(`Host path check: '${s}' not found.`),!1):(e.warning(`Host path check: Error checking '${s}': ${o.message}. Assuming it does not exist.`),!1)}}async function H(){let s=!1;try{let o={ignoreReturnCode:!0,silent:!0};e.info("Checking for NVIDIA GPU using nvidia-smi...");let i=await N.exec("nvidia-smi",[],o);i===0?(e.info("NVIDIA GPU detected via nvidia-smi."),s=!0):e.warning(`nvidia-smi failed or not found (exit code: ${i}). Assuming no GPU.`)}catch(o){e.warning(`Error trying to execute nvidia-smi: ${o.message}. Assuming no GPU.`)}return s}async function M(){try{let s=e.getInput("docker_image",{required:!0}),o=e.getInput("build_config",{required:!0}),i=e.getInput("mode",{required:!0}),g=e.getInput("container_user"),P=e.getInput("execution_providers"),T=e.getInput("extra_build_flags"),O=e.getInput("python_path_prefix"),U=e.getInput("allow_released_opset_only"),S=e.getInput("nightly_build"),a,d=!1,f=i.toLowerCase();switch(f){case"update":a="--update",d=!0;break;case"build":a="--build";break;case"test":a="--test";break;default:e.setFailed(`Invalid mode: '${i}'. Use 'update', 'build', or 'test'.`);return}e.info(`Running mode: ${i} (build.py arg: ${a}), Pass Cache Vars: ${d}, Container User: ${g}`);let _=[],l=P.toLowerCase().split(" ").filter(t=>t.trim());if(l.length>0){e.info(`Requested Execution Providers: ${l.join(", ")}`);for(let t of l)if(A.has(t)){let r=`--use_${t}`;e.info(`  Adding build flag: ${r}`),_.push(r)}else{e.setFailed(`Unknown execution provider requested: '${t}'. Allowed values are: ${q}`);return}}let $=process.env.GITHUB_WORKSPACE,x=process.env.RUNNER_TEMP,b=D.homedir(),u=C.join(b,".onnx"),c=C.join(b,".cache"),v=`/home/${g}`;if(!$)throw new Error("GITHUB_WORKSPACE environment variable not set.");if(!x)throw new Error("RUNNER_TEMP environment variable not set.");let p="/data/onnx",h="/data/models",k=await I(p),E=await I(h),w=k&&E;e.info(`--enable_onnx_tests will be ${w?"added":"skipped"} based on host test data path existence.`);let R=await H(),y=`${[O,"python3","tools/ci_build/build.py",`--build_dir build/${o}`,`--config ${o}`,"--cmake_generator Ninja","--skip_submodule_sync","--build_shared_lib","--parallel","--use_vcpkg","--use_vcpkg_ms_internal_asset_cache",...w?["--enable_onnx_tests"]:[],..._,T].filter(t=>t).join(" ")} ${a}`;e.debug(`Constructed build.py command: ${y}`),e.info(`Ensuring host cache directory exists: ${c}`);try{await m.mkdir(c,{recursive:!0}),e.info(`Host directory ${c} ensured.`)}catch(t){e.warning(`Could not ensure host directory ${c} exists: ${t.message}. Proceeding with mount attempt.`)}let n=["run","--rm"];if(R&&n.push("--gpus","all"),e.info("Adding standard volume mounts: workspace, runner temp, host cache."),n.push("--volume",`${$}:/onnxruntime_src`),n.push("--volume",`${x}:/onnxruntime_src/build`),n.push("--volume",`${c}:${v}/.cache`),f==="test"){e.info('Mode is "test", checking host paths for optional test data volume mounts.'),k?n.push("--volume",`${p}:/data/onnx:ro`):e.info(`Skipping ${p} mount as host path does not exist.`),E?n.push("--volume",`${h}:/data/models:ro`):e.info(`Skipping ${h} mount as host path does not exist.`),e.info(`Ensuring host directory exists for test mount: ${u}`);try{await m.mkdir(u,{recursive:!0}),e.info(`Host directory ${u} ensured.`),n.push("--volume",`${u}:${v}/.onnx`)}catch(t){e.warning(`Could not ensure host directory ${u} exists: ${t.message}. Skipping mount.`)}}else e.info(`Mode is "${i}", skipping test data volume mounts.`);if(n.push("-w","/onnxruntime_src"),n.push("-e",`ALLOW_RELEASED_ONNX_OPSET_ONLY=${U}`),n.push("-e",`NIGHTLY_BUILD=${S}`),d){e.info("Passing cache environment variables into container for update mode.");let t=process.env.ACTIONS_CACHE_URL||"",r=process.env.ACTIONS_RUNTIME_TOKEN||"";t&&e.setSecret(t),r&&e.setSecret(r),t?n.push("-e",`ACTIONS_CACHE_URL=${t}`):e.info("ACTIONS_CACHE_URL not found."),r?n.push("-e",`ACTIONS_RUNTIME_TOKEN=${r}`):e.info("ACTIONS_RUNTIME_TOKEN not found."),n.push("-e","RUNNER_TEMP=/onnxruntime_src/build")}else e.info("Skipping passing cache environment variables into container.");n.push(s),n.push("/bin/bash","-c",`set -ex; ${y}`),e.info("Executing docker command..."),e.debug(`docker ${n.join(" ")}`),await N.exec("docker",n),e.info("Docker command executed successfully.")}catch(s){e.setFailed(`Action failed with error: ${s.message}`)}}module.exports={run:M};
//# sourceMappingURL=index.js.map
