{
  "version": 3,
  "sources": ["../../../src/run-build-script-in-docker/index.js"],
  "sourcesContent": ["const core = require('@actions/core');\r\nconst exec = require('@actions/exec');\r\nconst path = require('path');\r\nconst os = require('os');\r\nconst fs = require('fs/promises'); // Import file system promises\r\n\r\n// List of known Execution Provider names\r\nconst KNOWN_EPS = new Set([\r\n  'acl', 'armnn', 'azure', 'cann', 'coreml', 'cuda', 'dml', 'dnnl',\r\n  'migraphx', 'nnapi', 'openvino', 'qnn', 'rknpu', 'rocm', 'snpe',\r\n  'tensorrt', 'vitisai', 'vsinpu', 'webgpu', 'webnn', 'xnnpack',\r\n]);\r\n// Create a sorted list string for error messages\r\nconst knownEpsString = Array.from(KNOWN_EPS).sort().join(', ');\r\n\r\n/**\r\n * Checks if a path exists on the host filesystem.\r\n * @param {string} filePath The path to check.\r\n * @returns {Promise<boolean>} True if the path exists, false otherwise.\r\n */\r\nasync function checkPathExists (filePath) {\r\n  try {\r\n    await fs.stat(filePath);\r\n    core.info(`Host path check: Found '${filePath}'.`);\r\n    return true;\r\n  } catch (error) {\r\n    if (error.code === 'ENOENT') {\r\n      core.info(`Host path check: '${filePath}' not found.`);\r\n      return false;\r\n    } else {\r\n      core.warning(`Host path check: Error checking '${filePath}': ${error.message}. Assuming it does not exist.`);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nasync function checkGpu () {\r\n  let hasGpu = false;\r\n  try {\r\n    const options = { ignoreReturnCode: true, silent: true };\r\n    core.info('Checking for NVIDIA GPU using nvidia-smi...');\r\n    const exitCode = await exec.exec('nvidia-smi', [], options);\r\n    if (exitCode === 0) {\r\n      core.info('NVIDIA GPU detected via nvidia-smi.');\r\n      hasGpu = true;\r\n    } else {\r\n      core.warning(`nvidia-smi failed or not found (exit code: ${exitCode}). Assuming no GPU.`);\r\n    }\r\n  } catch (error) {\r\n    core.warning(`Error trying to execute nvidia-smi: ${error.message}. Assuming no GPU.`);\r\n  }\r\n  return hasGpu;\r\n}\r\n\r\nasync function run () {\r\n  try {\r\n    // --- Get All Inputs ---\r\n    const dockerImage = core.getInput('docker_image', { required: true });\r\n    const buildConfig = core.getInput('build_config', { required: true });\r\n    const runMode = core.getInput('mode', { required: true });\r\n    const containerUser = core.getInput('container_user');\r\n    const epInputString = core.getInput('execution_providers');\r\n    const extraBuildFlags = core.getInput('extra_build_flags');\r\n    const pythonPathPrefix = core.getInput('python_path_prefix');\r\n    const allowOpset = core.getInput('allow_released_opset_only');\r\n    const nightlyBuild = core.getInput('nightly_build');\r\n\r\n    // --- Validate Mode and Determine Derived Settings ---\r\n    let buildPyArg;\r\n    let shouldPassCacheVars = false;\r\n    const lowerCaseRunMode = runMode.toLowerCase();\r\n\r\n    switch (lowerCaseRunMode) {\r\n      case 'update': buildPyArg = '--update'; shouldPassCacheVars = true; break;\r\n      case 'build': buildPyArg = '--build'; break;\r\n      case 'test': buildPyArg = '--test'; break;\r\n      default: core.setFailed(`Invalid mode: '${runMode}'. Use 'update', 'build', or 'test'.`); return;\r\n    }\r\n    core.info(`Running mode: ${runMode} (build.py arg: ${buildPyArg}), Pass Cache Vars: ${shouldPassCacheVars}, Container User: ${containerUser}`);\r\n    // --- End Validate Mode ---\r\n\r\n    // --- Process Execution Providers Input ---\r\n    const epFlags = [];\r\n    const requestedEps = epInputString.toLowerCase().split(' ').filter(ep => ep.trim());\r\n    if (requestedEps.length > 0) {\r\n      core.info(`Requested Execution Providers: ${requestedEps.join(', ')}`);\r\n      for (const ep of requestedEps) {\r\n        if (KNOWN_EPS.has(ep)) {\r\n          const flag = `--use_${ep}`;\r\n          core.info(`  Adding build flag: ${flag}`);\r\n          epFlags.push(flag);\r\n        } else {\r\n          // --- Fail on unknown EP ---\r\n          core.setFailed(`Unknown execution provider requested: '${ep}'. Allowed values are: ${knownEpsString}`);\r\n          return; // Stop processing immediately\r\n          // --- End Fail ---\r\n        }\r\n      }\r\n    }\r\n    // --- End Process EPs ---\r\n\r\n    // --- Get Runner Context/Defaults ---\r\n    const workspaceDir = process.env.GITHUB_WORKSPACE;\r\n    const runnerTempDir = process.env.RUNNER_TEMP;\r\n    const homeDir = os.homedir();\r\n    const homeOnnxDir = path.join(homeDir, '.onnx');\r\n    const hostCacheDir = path.join(homeDir, '.cache');\r\n    const containerHomeDir = `/home/${containerUser}`;\r\n\r\n    if (!workspaceDir) throw new Error('GITHUB_WORKSPACE environment variable not set.');\r\n    if (!runnerTempDir) throw new Error('RUNNER_TEMP environment variable not set.');\r\n\r\n    // --- Check Host Paths for Test Data ---\r\n    const hostDataOnnxPath = '/data/onnx';\r\n    const hostDataModelsPath = '/data/models';\r\n    const dataOnnxExists = await checkPathExists(hostDataOnnxPath);\r\n    const dataModelsExists = await checkPathExists(hostDataModelsPath);\r\n    const enableOnnxTestsFlag = dataOnnxExists && dataModelsExists;\r\n    core.info(`--enable_onnx_tests will be ${enableOnnxTestsFlag ? 'added' : 'skipped'} based on host test data path existence.`);\r\n    // --- End Check Host Paths ---\r\n\r\n    // --- Check for GPU ---\r\n    const gpuAvailable = await checkGpu();\r\n\r\n    // --- Construct build.py Command ---\r\n    const buildPyBaseArgs = [\r\n      pythonPathPrefix, 'python3', 'tools/ci_build/build.py',\r\n      `--build_dir build/${buildConfig}`, `--config ${buildConfig}`,\r\n      '--cmake_generator Ninja', '--skip_submodule_sync', '--build_shared_lib',\r\n      '--parallel', '--use_vcpkg', '--use_vcpkg_ms_internal_asset_cache',\r\n      ...(enableOnnxTestsFlag ? ['--enable_onnx_tests'] : []),\r\n      ...epFlags,\r\n      extraBuildFlags,\r\n    ];\r\n    const buildPyBase = buildPyBaseArgs.filter(part => part).join(' ');\r\n    const fullBuildPyCommand = `${buildPyBase} ${buildPyArg}`;\r\n    core.debug(`Constructed build.py command: ${fullBuildPyCommand}`);\r\n    // --- End Construct build.py Command ---\r\n\r\n    // --- Ensure Host Cache Directory Exists ---\r\n    core.info(`Ensuring host cache directory exists: ${hostCacheDir}`);\r\n    try { /* ... mkdir ... */ await fs.mkdir(hostCacheDir, { recursive: true }); core.info(`Host directory ${hostCacheDir} ensured.`); } catch (error) { /* ... core.warning ... */ core.warning(`Could not ensure host directory ${hostCacheDir} exists: ${error.message}. Proceeding with mount attempt.`); }\r\n    // --- End Ensure Host Cache Directory ---\r\n\r\n    // --- Construct Docker Run Arguments ---\r\n    const dockerArgs = ['run', '--rm'];\r\n    if (gpuAvailable) dockerArgs.push('--gpus', 'all');\r\n\r\n    // Add Volume Mounts\r\n    core.info('Adding standard volume mounts: workspace, runner temp, host cache.');\r\n    dockerArgs.push('--volume', `${workspaceDir}:/onnxruntime_src`);\r\n    dockerArgs.push('--volume', `${runnerTempDir}:/onnxruntime_src/build`);\r\n    dockerArgs.push('--volume', `${hostCacheDir}:${containerHomeDir}/.cache`);\r\n\r\n    // Conditionally add test-related volume mounts\r\n    if (lowerCaseRunMode === 'test') {\r\n      core.info('Mode is \"test\", checking host paths for optional test data volume mounts.');\r\n      if (dataOnnxExists) { dockerArgs.push('--volume', `${hostDataOnnxPath}:/data/onnx:ro`); } else { core.info(`Skipping ${hostDataOnnxPath} mount as host path does not exist.`); }\r\n      if (dataModelsExists) { dockerArgs.push('--volume', `${hostDataModelsPath}:/data/models:ro`); } else { core.info(`Skipping ${hostDataModelsPath} mount as host path does not exist.`); }\r\n      core.info(`Ensuring host directory exists for test mount: ${homeOnnxDir}`);\r\n      try {\r\n        await fs.mkdir(homeOnnxDir, { recursive: true });\r\n        core.info(`Host directory ${homeOnnxDir} ensured.`);\r\n        dockerArgs.push('--volume', `${homeOnnxDir}:${containerHomeDir}/.onnx`);\r\n      } catch (error) {\r\n        core.warning(`Could not ensure host directory ${homeOnnxDir} exists: ${error.message}. Skipping mount.`);\r\n      }\r\n    } else {\r\n      core.info(`Mode is \"${runMode}\", skipping test data volume mounts.`);\r\n    }\r\n\r\n    dockerArgs.push('-w', '/onnxruntime_src');\r\n    dockerArgs.push('-e', `ALLOW_RELEASED_ONNX_OPSET_ONLY=${allowOpset}`);\r\n    dockerArgs.push('-e', `NIGHTLY_BUILD=${nightlyBuild}`);\r\n\r\n    // Pass Cache Vars Conditionally\r\n    if (shouldPassCacheVars) {\r\n      core.info('Passing cache environment variables into container for update mode.');\r\n      const cacheUrl = process.env.ACTIONS_CACHE_URL || '';\r\n      const runtimeToken = process.env.ACTIONS_RUNTIME_TOKEN || '';\r\n      if (cacheUrl) core.setSecret(cacheUrl);\r\n      if (runtimeToken) core.setSecret(runtimeToken);\r\n      if (cacheUrl) dockerArgs.push('-e', `ACTIONS_CACHE_URL=${cacheUrl}`); else core.info('ACTIONS_CACHE_URL not found.');\r\n      if (runtimeToken) dockerArgs.push('-e', `ACTIONS_RUNTIME_TOKEN=${runtimeToken}`); else core.info('ACTIONS_RUNTIME_TOKEN not found.');\r\n      dockerArgs.push('-e', 'RUNNER_TEMP=/onnxruntime_src/build');\r\n    } else {\r\n      core.info('Skipping passing cache environment variables into container.');\r\n    }\r\n\r\n    dockerArgs.push(dockerImage);\r\n    dockerArgs.push('/bin/bash', '-c', `set -ex; ${fullBuildPyCommand}`);\r\n    // --- End Construct Docker Arguments ---\r\n\r\n    // --- Execute Docker Command ---\r\n    core.info('Executing docker command...');\r\n    core.debug(`docker ${dockerArgs.join(' ')}`);\r\n    await exec.exec('docker', dockerArgs);\r\n    core.info('Docker command executed successfully.');\r\n    // --- End Execute Docker Command ---\r\n  } catch (error) {\r\n    core.setFailed(`Action failed with error: ${error.message}`);\r\n  }\r\n}\r\n\r\nmodule.exports = { run }; \r\n"],
  "mappings": "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",
  "names": ["core", "exec", "path", "os", "fs", "KNOWN_EPS", "knownEpsString", "checkPathExists", "filePath", "error", "checkGpu", "hasGpu", "options", "exitCode", "run", "dockerImage", "buildConfig", "runMode", "containerUser", "epInputString", "extraBuildFlags", "pythonPathPrefix", "allowOpset", "nightlyBuild", "buildPyArg", "shouldPassCacheVars", "lowerCaseRunMode", "epFlags", "requestedEps", "ep", "flag", "workspaceDir", "runnerTempDir", "homeDir", "homeOnnxDir", "hostCacheDir", "containerHomeDir", "hostDataOnnxPath", "hostDataModelsPath", "dataOnnxExists", "dataModelsExists", "enableOnnxTestsFlag", "gpuAvailable", "fullBuildPyCommand", "part", "dockerArgs", "cacheUrl", "runtimeToken"]
}
