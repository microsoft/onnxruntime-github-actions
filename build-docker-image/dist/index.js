var e=require("@actions/core"),o=require("@actions/exec"),s=require("@actions/github"),g=require("node:fs/promises"),h=require("node:path"),I=require("node:os");async function $(){try{let i=e.getInput("Dockerfile",{required:!0}),u=e.getInput("DockerBuildArgs"),l=e.getInput("Repository",{required:!0}),d=i.substring(0,i.lastIndexOf("/"))||".";e.info(`Dockerfile context directory: ${d}`);let y=!(s.context.eventName==="pull_request"&&s.context.payload.pull_request.head.repo.fork),p="onnxruntimebuildcache",a=y,x=!1;if(a)try{await o.exec("az",["login","--identity","--output","none"],{outStream:null,errStream:null}),x=!0,await o.exec("az",["acr","login","-n",p])}catch(r){e.setFailed(`Azure login or ACR login failed: ${r.message}`);return}let c=a?`${p}.azurecr.io/${l}:latest`:`${l}:latest`;e.info(`Image: ${c}`);let k=process.env.GITHUB_WORKSPACE,n=h.join(d,"scripts","deps.txt");try{await g.access(n),e.info("deps.txt already exists. No need to copy")}catch{e.info(`Copying deps.txt to: ${n}`),await g.mkdir(h.dirname(n),{recursive:!0}),await g.copyFile(h.join(k,"cmake","deps.txt"),n)}let t=["build"];a?(t=["buildx","build","--load"],t.push("--cache-from",`type=registry,ref=${c}`),t.push("--build-arg","BUILDKIT_INLINE_CACHE=1")):t.push("--pull");let m=I.userInfo().uid;if(e.info(`Current user ID: ${m}`),u+=` --build-arg BUILD_UID=${m}`,u){let r=u.split(/\s(?=(?:[^'"`]*(['"`])[^'"`]*\1)*[^'"`]*$)/).filter(Boolean);for(let f of r)t.push(f)}t.push("--tag",c),t.push("--file",i),t.push(d);try{a?await o.exec("docker",["--log-level","error",...t]):await o.exec("docker",t)}catch(r){e.setFailed(`Docker build failed: ${r.message}`);return}if(await o.exec("docker",["tag",c,l]),a&&s.context.ref==="refs/heads/main"&&s.context.eventName==="push"?await o.exec("docker",["push",c]):(s.context.ref!=="refs/heads/main"||s.context.eventName!=="push")&&e.info("Skipping docker push. Not a push to the main branch."),x){let r=`${p}.azurecr.io`;try{await o.exec("docker",["logout",r])}catch(f){e.warning(`Docker logout failed: ${f.message}`)}}e.info("Docker build completed successfully.")}catch(i){e.setFailed(i.message)}}$();
//# sourceMappingURL=index.js.map
